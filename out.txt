NEW GUARD CREATING
NEW GUARD CREATING
NEW GUARD CREATING
NEW GUARD CREATING
NEW GUARD CREATING
NEW GUARD CREATING
NEW GUARD CREATING
NEW GUARD CREATING
NEW GUARD CREATING
NEW GUARD CREATING
NEW GUARD CREATING
NEW GUARD CREATING
NEW GUARD CREATING
NEW GUARD CREATING
NEW GUARD CREATING
NEW GUARD CREATING
NEW GUARD CREATING
NEW GUARD CREATING
NEW GUARD CREATING
NEW GUARD CREATING
NEW GUARD CREATING
NEW GUARD CREATING
NEW GUARD CREATING
Tokens: [Identifier("Func"), Punct(LeftParen), Identifier("p0"), Punct(RightParen), Punct(Equals), Identifier("A"), Punct(SimArrow), Identifier("B")]
parsing statement
status: AdvVec { index: Cell { value: 0 }, at: Some(Identifier("Func")) }
NEW GUARD CREATING
| NEW GUARD CREATING
| | parsing function_def
| | status: AdvVec { index: Cell { value: 0 }, at: Some(Identifier("Func")) }
| | NEW GUARD CREATING
| | | SUCCESS: Identifier parsed
| | | ADVANCING TO 2
| | | ADVANCED: Some(Punct(LeftParen))
| | | MATCHED successfully: Punct(LeftParen)
| | | SUCCESS: Identifier parsed
| | | MATCH FAILED: Punct(Comma)
| | | ADVANCING TO 4
| | | ADVANCED: Some(Punct(RightParen))
| | | MATCHED successfully: Punct(RightParen)
| | | ADVANCING TO 5
| | | ADVANCED: Some(Punct(Equals))
| | | MATCHED successfully: Punct(Equals)
| | | parsing expression
| | | status: AdvVec { index: Cell { value: 5 }, at: Some(Identifier("A")) }
| | | parsing everything
| | | status: AdvVec { index: Cell { value: 5 }, at: Some(Identifier("A")) }
| | | NEW GUARD CREATING
| | | | parsing prefix
| | | | status: AdvVec { index: Cell { value: 5 }, at: Some(Identifier("A")) }
| | | | NEW GUARD CREATING
| | | | | ADVANCING TO 6
| | | | | ADVANCED: Some(Identifier("A"))
| | | | | status: AdvVec { index: Cell { value: 6 }, at: Some(Punct(SimArrow)) }
| | | | | FAILED: RESTORED TO 5
| | | | parsing multiply
| | | | status: AdvVec { index: Cell { value: 5 }, at: Some(Identifier("A")) }
| | | | NEW GUARD CREATING
| | | | | parsing postfix
| | | | | status: AdvVec { index: Cell { value: 5 }, at: Some(Identifier("A")) }
| | | | | parsing everything_else
| | | | | status: AdvVec { index: Cell { value: 5 }, at: Some(Identifier("A")) }
| | | | | NEW GUARD CREATING
| | | | | | ADVANCING TO 6
| | | | | | ADVANCED: Some(Identifier("A"))
| | | | | | first: Identifier("A")
| | | | | | MATCH FAILED: Punct(Prime)
| | | | | | MATCH FAILED: Punct(LeftParen)
| | | | | | status: AdvVec { index: Cell { value: 6 }, at: Some(Punct(SimArrow)) }
| | | | | | SUCCESS: DID NOT RESTORE
| | | | | NEW GUARD CREATING
| | | | | | ADVANCING TO 7
| | | | | | ADVANCED: Some(Punct(SimArrow))
| | | | | | status: AdvVec { index: Cell { value: 7 }, at: Some(Identifier("B")) }
| | | | | | FAILED: RESTORED TO 6
| | | | | MATCH FAILED: Punct(Mult)
| | | | | parsing postfix
| | | | | status: AdvVec { index: Cell { value: 6 }, at: Some(Punct(SimArrow)) }
| | | | | parsing everything_else
| | | | | status: AdvVec { index: Cell { value: 6 }, at: Some(Punct(SimArrow)) }
| | | | | NEW GUARD CREATING
| | | | | | ADVANCING TO 7
| | | | | | ADVANCED: Some(Punct(SimArrow))
| | | | | | first: Punct(SimArrow)
| | | | | | status: AdvVec { index: Cell { value: 7 }, at: Some(Identifier("B")) }
| | | | | | FAILED: RESTORED TO 6
| | | | | status: AdvVec { index: Cell { value: 6 }, at: Some(Punct(SimArrow)) }
| | | | | SUCCESS: DID NOT RESTORE
| | | | status: AdvVec { index: Cell { value: 6 }, at: Some(Punct(SimArrow)) }
| | | | SUCCESS: DID NOT RESTORE
| | | status: AdvVec { index: Cell { value: 6 }, at: Some(Punct(SimArrow)) }
| | | SUCCESS: DID NOT RESTORE
| | status: AdvVec { index: Cell { value: 6 }, at: Some(Punct(SimArrow)) }
| | FAILED: RESTORED TO 0
| NEW GUARD CREATING
| | parsing act_func_def
| | NEW GUARD CREATING
| | | SUCCESS: Identifier parsed
| | | ADVANCING TO 2
| | | ADVANCED: Some(Punct(LeftParen))
| | | MATCHED successfully: Punct(LeftParen)
| | | SUCCESS: Identifier parsed
| | | MATCH FAILED: Punct(Comma)
| | | ADVANCING TO 4
| | | ADVANCED: Some(Punct(RightParen))
| | | MATCHED successfully: Punct(RightParen)
| | | ADVANCING TO 5
| | | ADVANCED: Some(Punct(Equals))
| | | MATCHED successfully: Punct(Equals)
| | | parsing act_expr
| | | NEW GUARD CREATING
| | | | parsing action
| | | | NEW GUARD CREATING
| | | | | ADVANCING TO 6
| | | | | ADVANCED: Some(Identifier("A"))
| | | | | ADVANCING TO 7
| | | | | ADVANCED: Some(Punct(SimArrow))
| | | | | MATCHED successfully: Punct(SimArrow)
| | | | | parsing expression
| | | | | status: AdvVec { index: Cell { value: 7 }, at: Some(Identifier("B")) }
| | | | | parsing everything
| | | | | status: AdvVec { index: Cell { value: 7 }, at: Some(Identifier("B")) }
| | | | | NEW GUARD CREATING
| | | | | | parsing prefix
| | | | | | status: AdvVec { index: Cell { value: 7 }, at: Some(Identifier("B")) }
| | | | | | NEW GUARD CREATING
| | | | | | | ADVANCING TO 8
| | | | | | | ADVANCED: Some(Identifier("B"))
| | | | | | | status: AdvVec { index: Cell { value: 8 }, at: None }
| | | | | | | FAILED: RESTORED TO 7
| | | | | | parsing multiply
| | | | | | status: AdvVec { index: Cell { value: 7 }, at: Some(Identifier("B")) }
| | | | | | NEW GUARD CREATING
| | | | | | | parsing postfix
| | | | | | | status: AdvVec { index: Cell { value: 7 }, at: Some(Identifier("B")) }
| | | | | | | parsing everything_else
| | | | | | | status: AdvVec { index: Cell { value: 7 }, at: Some(Identifier("B")) }
| | | | | | | NEW GUARD CREATING
| | | | | | | | ADVANCING TO 8
| | | | | | | | ADVANCED: Some(Identifier("B"))
| | | | | | | | first: Identifier("B")
| | | | | | | | MATCH FAILED: Punct(Prime)
| | | | | | | | MATCH FAILED: Punct(LeftParen)
| | | | | | | | status: AdvVec { index: Cell { value: 8 }, at: None }
| | | | | | | | SUCCESS: DID NOT RESTORE
| | | | | | | NEW GUARD CREATING
| | | | | | | | ADVANCING TO 9
| | | | | | | | ADVANCED: None
| | | | | | | | status: AdvVec { index: Cell { value: 9 }, at: None }
| | | | | | | | FAILED: RESTORED TO 8
| | | | | | | MATCH FAILED: Punct(Mult)
| | | | | | | parsing postfix
| | | | | | | status: AdvVec { index: Cell { value: 8 }, at: None }
| | | | | | | parsing everything_else
| | | | | | | status: AdvVec { index: Cell { value: 8 }, at: None }
| | | | | | | NEW GUARD CREATING
| | | | | | | | ADVANCING TO 9
| | | | | | | | ADVANCED: None
| | | | | | | | status: AdvVec { index: Cell { value: 9 }, at: None }
| | | | | | | | FAILED: RESTORED TO 8
| | | | | | | status: AdvVec { index: Cell { value: 8 }, at: None }
| | | | | | | SUCCESS: DID NOT RESTORE
| | | | | | status: AdvVec { index: Cell { value: 8 }, at: None }
| | | | | | SUCCESS: DID NOT RESTORE
| | | | | status: AdvVec { index: Cell { value: 8 }, at: None }
| | | | | SUCCESS: DID NOT RESTORE
| | | | MATCH FAILED: Punct(Comma)
| | | | status: AdvVec { index: Cell { value: 8 }, at: None }
| | | | SUCCESS: DID NOT RESTORE
| | | status: AdvVec { index: Cell { value: 8 }, at: None }
| | | SUCCESS: DID NOT RESTORE
| | status: AdvVec { index: Cell { value: 8 }, at: None }
| | FAILED: RESTORED TO 0
| status: AdvVec { index: Cell { value: 0 }, at: Some(Identifier("Func")) }
| SUCCESS: DID NOT RESTORE

ENDING STATE: 
tokens: [Identifier("Func"), Punct(LeftParen), Identifier("p0"), Punct(RightParen), Punct(Equals), Identifier("A"), Punct(SimArrow), Identifier("B")]
index: 0


Parsed Result:
Some(
    ActFunction(
        ActFuncDef {
            func: Ident(
                "Func",
            ),
            params: [
                Ident(
                    "p0",
                ),
            ],
            expr: ActExpr {
                actions: [
                    Raw(
                        RawAction {
                            ident: Ident(
                                "A",
                            ),
                            expr: Expression {
                                expr: Below(
                                    Below(
                                        Below(
                                            Below(
                                                Ident(
                                                    Ident(
                                                        "B",
                                                    ),
                                                ),
                                            ),
                                        ),
                                    ),
                                ),
                            },
                        },
                    ),
                ],
            },
        },
    ),
)
